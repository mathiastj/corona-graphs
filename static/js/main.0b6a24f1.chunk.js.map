{"version":3,"sources":["utils/constants.js","components/line-chart.js","utils/set-diff.js","utils/data-format.js","App.js","serviceWorker.js","index.js"],"names":["DATA_TYPES","DATA_MODIFIERS","distinguishableColors","CoronaChart","props","renderCustomizedLegend","payload","currentCountry","countryHeader","className","style","marginBottom","map","entry","country","dataKey","color","label","inActive","state","disabled","includes","onClick","handleClick","marginRight","width","height","cx","cy","type","size","fill","checked","getMaxNonDisabled","yLabelPrioritizedKeys","key","perCapita","rollingAverage","disabledKey","scale","this","setState","filter","obj","concat","forceUpdate","dataPoints","data","yAxisDomain","yAxisMaxKey","display","float","handleOptionChange","id","name","value","handlePerCapitaChange","handleRollingAverageChange","margin","top","right","left","bottom","chartLines","chartLine","connectNulls","toLowerCase","stroke","yAxisId","dot","r","textAnchor","tick","angle","fontSize","padding","domain","allowDataOverflow","formatter","itemSorter","item","filterNull","wrapperStyle","borderColor","boxShadow","contentStyle","backgroundColor","labelStyle","fontWeight","align","content","a","b","countries","prevCountries","prev","Set","current","removedCountries","x","has","i","length","push","splice","indexOf","removed","removedCountry","pop","maxPerDataKey","Object","keys","sort","sorted","calcPrioritizedKeys","Component","formatStringToNumberOrNull","strigWithNumber","Number","initialCountries","parseData","input","locations","newExtraction","dataPerLine","String","split","locationLines","popDict","row","location","population","header","firstDataPointPerPlace","line","date","place","newCases","newDeaths","totalCases","totalDeaths","popData","values","localeCompare","addRollingAverages","nc","nd","multiData","filteredDataPoint","rollingFigures","useDataKey","newDataKey","sum","entries","dataToday","ROLLING_AVERAGE_DAYS","rollingFigure","dailyStat","isNaN","toFixed","customStyles","option","provided","isSelected","App","selectableCountries","currentCountries","Promise","all","axios","get","res","parsed","labels","newParsedData","getData","multiCountryData","newParsed","includeDataPointsGoingForward","dataPoint","tc","td","console","log","href","isMulti","options","onChange","_onChange","defaultValue","styles","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iYAAaA,EACA,WADAA,EAEC,YAFDA,EAGG,cAHHA,EAIE,aAGFC,EACF,UADEA,EAEC,Y,QCJRC,EAAwB,CAC5B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAgYaC,E,kDAtTb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgCRC,uBAAyB,YAAkB,IAAfC,EAAc,EAAdA,QACtBC,EAAiB,GACjBC,EAAgB,KACpB,OACE,yBAAKC,UAAU,oBAAoBC,MAAO,CAAEC,aAAc,KACvDL,EAAQM,KAAI,SAACC,GACRN,IAAmBM,EAAMC,SAC3BP,EAAiBM,EAAMC,QACvBN,EACE,0BAAMC,UAAU,kBACd,6BACCI,EAAMC,QACP,+BAIJN,EAAgB,KAXI,IAadO,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,MAAOC,EAAUJ,EAAVI,MAClBC,EAAW,EAAKC,MAAMC,SAASC,SAASN,GAM9C,OACE,8BACGP,EACD,0BAAMc,QAAS,kBAAM,EAAKC,YAAYR,IAAUL,MARtC,CACZc,YAAa,GACbR,MAAO,SAOH,kBAAC,IAAD,CAASS,MAAO,GAAIC,OAAQ,GAAIhB,MAAO,CAAEC,cAAe,IACtD,kBAAC,IAAD,CAASgB,GAAI,GAAIC,GAAI,GAAIC,KAAK,SAASC,KAAM,GAAIC,KAAMf,KAEzD,2BAAOa,KAAK,WAAWG,SAAUd,IACjC,0BAAMT,UAAU,sBAAsBQ,UAlEjC,EAwJnBgB,kBAAoB,WAAO,IAAD,gBACN,EAAKd,MAAMe,uBADL,IACxB,2BAAoD,CAAC,IAA1CC,EAAyC,QAElD,GAAK,EAAKhB,MAAMiB,WAAc,EAAKjB,MAAMkB,gBAIlC,GAAI,EAAKlB,MAAMiB,WAAa,EAAKjB,MAAMkB,gBAC5C,KACIF,EAAId,SAAJ,WAAyBc,EAAId,SAAJ,UAAgBpB,OAC1CkC,EAAId,SAAJ,UAAgBpB,GAAhB,OAA4CA,IAE7C,cAEG,IAAK,EAAKkB,MAAMiB,WAAa,EAAKjB,MAAMkB,gBAC7C,GACEF,EAAId,SAAJ,UAAgBpB,KACfkC,EAAId,SAAJ,SAAwBc,EAAId,SAAJ,UAAgBpB,IAEzC,cAEG,GAAI,EAAKkB,MAAMiB,YAAc,EAAKjB,MAAMkB,kBACxCF,EAAId,SAAJ,UAAgBpB,KAAgCkC,EAAId,SAAJ,UAAgBpB,KACnE,cAnBF,GAAIkC,EAAId,SAAJ,UAAgBpB,KAAgCkC,EAAId,SAAJ,UAAgBpB,IAClE,SAsBJ,IA1BkD,EA0B9CmB,GAAW,EA1BmC,cA2BxB,EAAKD,MAAMC,UA3Ba,IA2BlD,2BAA+C,CAAC,IAArCkB,EAAoC,QAE7C,GAAIH,EAAId,SAASiB,GAAc,CAC7BlB,GAAW,EACX,QA/B8C,8BAkClD,IAAKA,EACH,OAAOe,GApCa,8BAuCxB,MAAO,IA7LP,EAAKhB,MAAQ,CAAEoB,MAAO,SAAUH,WAAW,EAAOC,gBAAgB,GAFjD,E,wDAKPtB,GACNyB,KAAKrB,MAAMC,SAASC,SAASN,GAC/ByB,KAAKC,SAAS,CAAErB,SAAUoB,KAAKrB,MAAMC,SAASsB,QAAO,SAACC,GAAD,OAASA,IAAQ5B,OAEtEyB,KAAKC,SAAS,CAAErB,SAAUoB,KAAKrB,MAAMC,SAASwB,OAAO7B,O,yCAItCwB,GACjBC,KAAKC,SAAS,CACZF,UAEFC,KAAKK,gB,4CAGeT,GACpBI,KAAKC,SAAS,CACZL,cAEFI,KAAKK,gB,iDAEoBR,GACzBG,KAAKC,SAAS,CACZJ,mBAEFG,KAAKK,gB,+BAoKG,IAAD,OACCC,EAAeN,KAAKpC,MAApB0C,WAER,IAAKA,EACH,OAAO,KAGT,IAAMC,EAAOD,EACPV,EAAYI,KAAKrB,MAAMiB,UAAX,UAA0BnC,GAA8B,GACpEoC,EAAiBG,KAAKrB,MAAMkB,eAAX,UAA+BpC,GAA2B,GAG7E+C,EAAc,CAAC,EAAG,WACG,QAArBR,KAAKrB,MAAMoB,OAAmBC,KAAKrB,MAAMiB,UAC3CY,EAAc,CAAC,IAAM,WACS,QAArBR,KAAKrB,MAAMoB,OAAoBC,KAAKrB,MAAMiB,YACnDY,EAAc,CAAC,EAAG,YAIpB,IAAIC,EAAcT,KAAKP,oBAEvB,OACE,6BACE,yBAAKvB,MAAO,CAAEe,MAAO,MAAOyB,QAAS,iBACnC,0BAAMxC,MAAO,CAAEyC,MAAO,OAAQ,cAAe,SAC3C,0BAAM7B,QAAS,kBAAM,EAAK8B,mBAAmB,YAC3C,2BAAOvB,KAAK,QAAQwB,GAAG,SAASC,KAAK,QAAQC,MAAM,SAASvB,QAA8B,WAArBQ,KAAKrB,MAAMoB,QAChF,0BAAM7B,MAAO,CAAEM,MAAO,SAAtB,WAEF,0BAAMM,QAAS,kBAAM,EAAK8B,mBAAmB,SAC3C,2BAAOvB,KAAK,QAAQwB,GAAG,MAAMC,KAAK,QAAQC,MAAM,MAAMvB,QAA8B,QAArBQ,KAAKrB,MAAMoB,QAC1E,0BAAM7B,MAAO,CAAEM,MAAO,SAAtB,SAGJ,0BACEN,MAAO,CAAEyC,MAAO,QAAS,eAAgB,QACzC7B,QAAS,kBAAM,EAAKkC,uBAAuB,EAAKrC,MAAMiB,aAEtD,2BAAOP,KAAK,WAAWwB,GAAG,YAAYC,KAAK,YAAYtB,QAASQ,KAAKrB,MAAMiB,YAC3E,0BAAM1B,MAAO,CAAEM,MAAO,SAAtB,uBAEF,0BACEN,MAAO,CAAEyC,MAAO,QAAS,eAAgB,QACzC7B,QAAS,kBAAM,EAAKmC,4BAA4B,EAAKtC,MAAMkB,kBAE3D,2BAAOR,KAAK,WAAWwB,GAAG,iBAAiBC,KAAK,iBAAiBtB,QAASQ,KAAKrB,MAAMkB,iBACrF,0BAAM3B,MAAO,CAAEM,MAAO,SAAtB,2BAGJ,kBAAC,IAAD,CAAqBU,OAAQ,IAAKjB,UAAU,mBAC1C,kBAAC,IAAD,CAAWgB,MAAO,IAAKC,OAAQ,IAAKqB,KAAMA,EAAMW,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAC7FtB,KAAKrB,MAAM4C,WACTrB,QAAO,SAACsB,GAAD,OAAgB,EAAK7C,MAAMC,SAASC,SAAS2C,EAAUjD,YAC9DH,KAAI,SAACoD,GAAD,OACH,kBAAC,IAAD,CACEC,cAAY,EACZX,KAAI,UAAKU,EAAUlD,QAAf,YAA0BkD,EAAU/C,MAAMiD,eAC9CrC,KAAK,WACLd,QACEiD,EAAUjD,QAAQM,SAAS,SAA3B,UACO2C,EAAUjD,SADjB,OAC2BqB,GAD3B,UAEO4B,EAAUjD,SAFjB,OAE2BqB,GAF3B,OAEuCC,GAEzC8B,OAAQH,EAAUhD,MAClBoD,QAAS,EACTC,IAAK,CAAEC,EAAG,QAGhB,kBAAC,IAAD,CACEvD,QAAQ,OACRwD,WAAW,MACXC,KAAM,CAAEC,OAAQ,GAAIC,SAAU,IAC9BhD,OAAQ,IACRiD,QAAS,CAAEf,MAAO,EAAGC,KAAM,KAG7B,kBAAC,IAAD,CACE9C,QAASkC,EACT2B,OAAQ5B,EACRwB,KAAM,CAAEC,OAAQ,GAAIC,SAAU,IAC9BjD,MAAO,GACPc,MAAOC,KAAKrB,MAAMoB,MAClBsC,mBAAiB,EACjBF,QAAS,CAAEhB,IAAK,EAAGG,OAAQ,KAI7B,kBAAC,IAAD,CACEgB,UAAW,SAACvB,EAAOD,GAAR,MAAiB,CAChB,OAAVC,EAAiB,EAAIA,EADK,UAEvBD,EAFuB,YAEf,EAAKnC,MAAMiB,UAAY,cAAgB,MAEpD2C,WAAY,SAACC,GAAD,OAAWA,EAAKzB,OAC5B0B,YAAY,EACZC,aAAc,CACZC,YAAa,QACbC,UAAW,sCAEbC,aAAc,CAAEC,gBAAiB,4BACjCC,WAAY,CAAEC,WAAY,OAAQxE,MAAO,aAE3C,kBAAC,IAAD,CACEkE,aAAc,CAAEvB,IAAK,KACrB8B,MAAM,SACN/D,OAAQ,IACRgE,QAASlD,KAAKnC,uBACdC,QAASkC,KAAKrB,MAAM4C,mB,gDAlOA3D,EAAOe,GAAQ,IClLnBwE,EAAGC,EDmLrB9C,EAA0B1C,EAA1B0C,WAAY+C,EAAczF,EAAdyF,UACpB,IAAK/C,GAAc3B,EAAM2E,gBAAkBD,EACzC,OAAO,KAGT,GAAI1E,EAAM2E,cAAe,CAOvB,IANA,IAAMC,EAAO,IAAIC,IAAI7E,EAAM2E,eACrBG,EAAU,IAAID,IAAIH,GAElBK,GC5LkBP,ED4LeI,EC5LZH,ED4LkBK,EC5LZ,IAAID,IAAI,YAAIL,GAAGjD,QAAO,SAACyD,GAAD,OAAQP,EAAEQ,IAAID,QD+L5DE,EAAIlF,EAAM4C,WAAWuC,OAAS,EAAGD,GAAK,EAAGA,IAC5CH,EAAiBE,IAAIjF,EAAM4C,WAAWsC,GAAGvF,WAC3CZ,EAAsBqG,KAAKpF,EAAM4C,WAAWsC,GAAGrF,OAC/CG,EAAM4C,WAAWyC,OAAOrF,EAAM4C,WAAW0C,QAAQtF,EAAM4C,WAAWsC,IAAK,IAK3E,IAAK,IAAIA,EAAIlF,EAAMC,SAASkF,OAAS,EAAGD,GAAK,EAAGA,IAAK,CACnD,IADmD,EAC/CK,GAAU,EADqC,cAEtBR,GAFsB,IAEnD,2BAA+C,CAAC,IAArCS,EAAoC,QACzCxF,EAAMC,SAASiF,GAAGhF,SAASsF,KAC7BD,GAAU,IAJqC,8BAO/CA,GACFvF,EAAMC,SAASoF,OAAOrF,EAAMC,SAASqF,QAAQtF,EAAMC,SAASiF,IAAK,IAKvE,IAlC4C,EAkCtCtC,EAAa5C,EAAM4C,YAAc,GACjC3C,EAAWD,EAAMC,UAAY,GAnCS,cAoCtByE,GApCsB,IAoC5C,2BAAiC,CAAC,IAAvB/E,EAAsB,UAC1BK,EAAM2E,eAAkB3E,EAAM2E,gBAAkB3E,EAAM2E,cAAczE,SAASP,MAChFiD,EAAWwC,KAAK,CACdzF,UACAC,QAAQ,GAAD,OAAKf,GAAL,OAA4Bc,GACnCE,MAAOd,EAAsB0G,MAC7B3F,MAAM,cAER8C,EAAWwC,KAAK,CACdzF,UACAC,QAAQ,GAAD,OAAKf,GAAL,OAA6Bc,GACpCE,MAAOd,EAAsB0G,MAC7B3F,MAAM,eAER8C,EAAWwC,KAAK,CACdzF,UACAC,QAAQ,GAAD,OAAKf,GAAL,OAA8Bc,GACrCE,MAAOd,EAAsB0G,MAC7B3F,MAAM,gBAER8C,EAAWwC,KAAK,CACdzF,UACAC,QAAQ,GAAD,OAAKf,GAAL,OAA+Bc,GACtCE,MAAOd,EAAsB0G,MAC7B3F,MAAM,iBAERG,EAASmF,KAAT,UAAiBvG,GAAjB,OAA0Cc,IAC1CM,EAASmF,KAAT,UAAiBvG,GAAjB,OAA2Cc,MA/DH,8BAqE5C,MAAO,CACLiD,aACA3C,WACA0E,cAAeD,EACf3D,sBA3NsB,SAACY,EAAY+C,GACvC,IADqD,EAC/CgB,EAAgB,GAD+B,cAE/BhB,GAF+B,IAErD,2BAAiC,CAAC,IAAvB/E,EAAsB,QAC/B+F,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,IAAa,EACrD+F,EAAc,GAAD,OAAI7G,GAAJ,OAA6Bc,IAAa,EACvD+F,EAAc,GAAD,OAAI7G,GAAJ,OAA8Bc,IAAa,EACxD+F,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,IAAa,EAEtD+F,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,GAA3B,OAAqCb,IAA+B,EACjF4G,EAAc,GAAD,OAAI7G,GAAJ,OAA6Bc,GAA7B,OAAuCb,IAA+B,EACnF4G,EAAc,GAAD,OAAI7G,GAAJ,OAA8Bc,GAA9B,OAAwCb,IAA+B,EACpF4G,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,GAA5B,OAAsCb,IAA+B,EAElF4G,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,GAA3B,OAAqCb,IAA4B,EAC9E4G,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,GAA5B,OAAsCb,IAA4B,EAC/E4G,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,GAA3B,OAAqCb,GAArC,OAAiEA,IAA4B,EAC1G4G,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,GAA5B,OAAsCb,GAAtC,OAAkEA,IAA4B,EAd5E,oBAgBX6C,GAhBW,IAgB/B,2BAAgC,CAAC,IAAtBjC,EAAqB,QAC1BA,EAAM,GAAD,OAAIb,GAAJ,OAA2Bc,IAAa+F,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,MACvF+F,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,IAAaD,EAAM,GAAD,OAAIb,GAAJ,OAA2Bc,IACrF+F,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,GAA3B,OAAqCb,IAChDY,EAAM,GAAD,OAAIb,GAAJ,OAA2Bc,GAA3B,OAAqCb,KAE1CY,EAAM,GAAD,OAAIb,GAAJ,OAA6Bc,IAAa+F,EAAc,GAAD,OAAI7G,GAAJ,OAA6Bc,MAC3F+F,EAAc,GAAD,OAAI7G,GAAJ,OAA6Bc,IAAaD,EAAM,GAAD,OAAIb,GAAJ,OAA6Bc,IACzF+F,EAAc,GAAD,OAAI7G,GAAJ,OAA6Bc,GAA7B,OAAuCb,IAClDY,EAAM,GAAD,OAAIb,GAAJ,OAA6Bc,GAA7B,OAAuCb,KAE5CY,EAAM,GAAD,OAAIb,GAAJ,OAA8Bc,IAAa+F,EAAc,GAAD,OAAI7G,GAAJ,OAA8Bc,MAC7F+F,EAAc,GAAD,OAAI7G,GAAJ,OAA8Bc,IAAaD,EAAM,GAAD,OAAIb,GAAJ,OAA8Bc,IAC3F+F,EAAc,GAAD,OAAI7G,GAAJ,OAA8Bc,GAA9B,OAAwCb,IACnDY,EAAM,GAAD,OAAIb,GAAJ,OAA8Bc,GAA9B,OAAwCb,KAE7CY,EAAM,GAAD,OAAIb,GAAJ,OAA4Bc,IAAa+F,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,MACzF+F,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,IAAaD,EAAM,GAAD,OAAIb,GAAJ,OAA4Bc,IACvF+F,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,GAA5B,OAAsCb,IACjDY,EAAM,GAAD,OAAIb,GAAJ,OAA4Bc,GAA5B,OAAsCb,KAG7CY,EAAM,GAAD,OAAIb,GAAJ,OAA4Bc,GAA5B,OAAsCb,IAC3C4G,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,GAA5B,OAAsCb,MAEnD4G,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,GAA5B,OAAsCb,IACjDY,EAAM,GAAD,OAAIb,GAAJ,OAA4Bc,GAA5B,OAAsCb,IAC7C4G,EAAc,GAAD,OAAI7G,GAAJ,OAA4Bc,GAA5B,OAAsCb,GAAtC,OAAkEA,IAC7EY,EAAM,GAAD,OAAIb,GAAJ,OAA4Bc,GAA5B,OAAsCb,GAAtC,OAAkEA,KAGzEY,EAAM,GAAD,OAAIb,GAAJ,OAA2Bc,GAA3B,OAAqCb,IAC1C4G,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,GAA3B,OAAqCb,MAElD4G,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,GAA3B,OAAqCb,IAChDY,EAAM,GAAD,OAAIb,GAAJ,OAA2Bc,GAA3B,OAAqCb,IAC5C4G,EAAc,GAAD,OAAI7G,GAAJ,OAA2Bc,GAA3B,OAAqCb,GAArC,OAAiEA,IAC5EY,EAAM,GAAD,OAAIb,GAAJ,OAA2Bc,GAA3B,OAAqCb,GAArC,OAAiEA,MArD7C,gCAFoB,8BAmErD,OARmB6G,OAAOC,KAAKF,GAC5BjG,KAAI,SAACuB,GACJ,MAAO,CAAEA,MAAKoB,MAAOsD,EAAc1E,OAGpC6E,MAAK,SAACrB,EAAGC,GACR,OAAOA,EAAErC,MAAQoC,EAAEpC,SAEL3C,KAAI,SAACqG,GAAD,OAAYA,EAAO9E,OAkJT+E,CAAoBpE,EAAY+C,Q,GA/IxCsB,aEtGbC,EAA6B,SAACC,GACzC,OAAmC,IAA5BC,OAAOD,GAAyB,KAAOC,OAAOD,ICUjDE,EAAmB,CACvB,CAAEhE,MAAO,QAAStC,MAAO,SACzB,CAAEsC,MAAO,QAAStC,MAAO,UAIrBuG,EAAY,SAACC,EAAOC,GACxB,IAAMC,EAAgB,GAChB9B,EAAY,GACZ+B,EAAcC,OAAOJ,GAAOK,MAAM,MAClCC,EAAgBF,OAAOH,GAAWI,MAAM,MACxCE,EAAU,GAChBD,EAAcvB,OAAO,EAAGuB,EAAczB,QAAQ1F,KAAI,SAACqH,GAAS,IAAD,EACpBA,EAAIH,MAAM,KADU,mBAChDI,EADgD,KAClCC,EADkC,KAEzDH,EAAQE,GAAYC,KAEtB,IAVsC,EAUlCC,GAAS,EACPC,EAAyB,GAXO,cAYnBT,GAZmB,IAYtC,2BAAgC,CAAC,IAAtBU,EAAqB,QAC9B,GAAIF,EACFA,GAAS,MADX,CAD8B,MAKsCE,EAAKR,MAAM,KALjD,mBAKvBS,EALuB,KAKjBC,EALiB,KAKVC,EALU,KAKAC,EALA,KAKWC,EALX,KAKuBC,EALvB,KAM9B,GAAKJ,EAAL,CAGA,IAS0B,EATpBK,EAAUb,EAAQQ,GAExB,GADA3C,EAAU2C,IAAS,GACdH,EAAuBG,GAAQ,CAClC,GAAyB,IAArBlB,OAAOmB,IAAyC,IAAtBnB,OAAOoB,IAA2C,IAAvBpB,OAAOqB,IAA6C,IAAxBrB,OAAOsB,GAC1F,SAEAP,EAAuBG,IAAS,EAGpC,GAAKb,EAAcY,GAUjBZ,EAAcY,GAAd,UAAuBvI,GAAvB,OAA8CwI,IAAWpB,EAA2BqB,GACpFd,EAAcY,GAAd,UAAuBvI,GAAvB,OAA+CwI,IAAWpB,EAA2BsB,GACrFf,EAAcY,GAAd,UAAuBvI,GAAvB,OAAgDwI,IAAWpB,EAA2BuB,GACtFhB,EAAcY,GAAd,UAAuBvI,GAAvB,OAAiDwI,IAAWpB,EAA2BwB,GACvFjB,EAAcY,GAAd,iBAA8BC,IAAWpB,EAA2ByB,QAbpElB,EAAcY,IAAd,GACEA,KAAMA,GADR,wBAEMvI,GAFN,OAE6BwI,GAAUpB,EAA2BqB,IAFlE,wBAGMzI,GAHN,OAG8BwI,GAAUpB,EAA2BsB,IAHnE,wBAIM1I,GAJN,OAI+BwI,GAAUpB,EAA2BuB,IAJpE,wBAKM3I,GALN,OAKgCwI,GAAUpB,EAA2BwB,IALrE,+BAMaJ,GAAUpB,EAA2ByB,IANlD,MA/BkC,8BAqDtC,MAAO,CAJY/B,OAAOgC,OAAOnB,GAAeX,MAAK,SAACrB,EAAGC,GACvD,OAAOD,EAAE4C,KAAKQ,cAAcnD,EAAE2C,SAGZzB,OAAOC,KAAKlB,KAI5BmD,EAAqB,SAAClI,EAAS2H,EAAUC,EAAWO,EAAIC,EAAIC,EAAWC,GAC3E,IAAIC,EAAiB,CACnB,CACEC,WAAW,GAAD,OAAKtJ,GAAL,OAA4Bc,EAAQyC,OAC9CgG,WAAW,GAAD,OAAKvJ,GAAL,OAA4Bc,EAAQyC,OAApC,OAA4CtD,GACtDuJ,IAAK,EACLC,QAAS,EACTC,UAAWjB,GAEb,CACEa,WAAW,GAAD,OAAKtJ,GAAL,OAA6Bc,EAAQyC,OAC/CgG,WAAW,GAAD,OAAKvJ,GAAL,OAA6Bc,EAAQyC,OAArC,OAA6CtD,GACvDuJ,IAAK,EACLC,QAAS,EACTC,UAAWhB,GAEb,CACEY,WAAW,GAAD,OAAKtJ,GAAL,OAA4Bc,EAAQyC,OAApC,OAA4CtD,GACtDsJ,WAAW,GAAD,OAAKvJ,GAAL,OAA4Bc,EAAQyC,OAApC,OAA4CtD,GAA5C,OAAwEA,GAClFuJ,IAAK,EACLC,QAAS,EACTC,UAAWT,GAEb,CACEK,WAAW,GAAD,OAAKtJ,GAAL,OAA6Bc,EAAQyC,OAArC,OAA6CtD,GACvDsJ,WAAW,GAAD,OAAKvJ,GAAL,OAA6Bc,EAAQyC,OAArC,OAA6CtD,GAA7C,OAAyEA,GACnFuJ,IAAK,EACLC,QAAS,EACTC,UAAWR,IAIf,GAAIC,EAAU7C,QAAUqD,EAA0B,CAAC,IAAD,gBACpBN,GADoB,IAChD,2BAA4C,CAE1C,IAF2C,IAAlCO,EAAiC,QAEjCvD,EAAI,EAAGA,EAAIsD,EAA0BtD,IAAK,CACjD,IAAIwD,EAAYV,EAAUA,EAAU7C,OAASD,EAAI,GAAGuD,EAAcN,YACjD,MAAbO,GAAsBC,MAAMD,KAC9BD,EAAcJ,KAAOK,EACrBD,EAAcH,SAAW,GAGzBG,EAAcF,YAAcI,MAAMF,EAAcF,aAClDE,EAAcJ,KAAOI,EAAcF,UACnCE,EAAcH,SAAW,GAI3BL,EAAkBQ,EAAcL,YAAcjC,OAAOA,OAAOsC,EAAcJ,IAAMI,EAAcH,SAASM,QAAQ,KAhBjE,iCAqB9CC,EAAe,CACnBC,OAAQ,SAACC,EAAU/I,GAAX,mBAAC,eACJ+I,GADG,IAENlJ,MAAOG,EAAMgJ,WAAa,SAAW,YAkH1BC,E,kDA7Gb,aAAe,IAAD,8BACZ,gBACKjJ,MAAQ,CACXkJ,oBAAqB9C,EACrB+C,iBAAkB/C,GAJR,E,gNASmBgD,QAAQC,IAAI,CAACC,IAAMC,IAAN,UAvI/B,+FAuIyDD,IAAMC,IAAN,UAtIhD,iG,0CAsIfC,E,KAAKjD,E,OACgBF,EAAUmD,EAAI5H,KAAM2E,EAAU3E,M,mBAAnD6H,E,KAAQ/E,E,KACTgF,EAAShF,EAAUjF,KAAI,SAACuB,GAAD,MAAU,CAAEoB,MAAOpB,EAAKlB,MAAOkB,MAC5DK,KAAKC,SAAS,CAAE4H,oBAAqBQ,EAAQC,cAAeF,I,UACtDpI,KAAKuI,QAAQxD,G,8KAGP1B,G,kGACPA,GAAkC,IAArBA,EAAUS,O,uBAC1B9D,KAAKC,SAAS,CAAE6H,iBAAkB,GAAIU,iBAAkB,K,0BAGpDC,EAAYzI,KAAKrB,MAAM2J,cACvB3B,EAAY,GAEd+B,GAAgC,E,MACZpE,OAAOgC,OAAOmC,G,4CAA3BE,E,KAEJD,E,+BACmBrF,G,8DAAX/E,E,SACLqK,EAAU,GAAD,OAAInL,GAAJ,OAA2Bc,EAAQyC,Q,wBAC9C2H,GAAgC,E,sKAKtC,GAAIA,EAA+B,CAC3B9B,EAAoB,GADO,cAEXvD,GAFW,IAEjC,IAFiC,iBAEtB/E,EAFsB,QAGzB2H,EAAW0C,EAAU,GAAD,OAAInL,GAAJ,OAA2Bc,EAAQyC,SAAY,KACnEmF,EAAYyC,EAAU,GAAD,OAAInL,GAAJ,OAA4Bc,EAAQyC,SAAY,KACrEoF,EAAawC,EAAU,GAAD,OAAInL,GAAJ,OAA6Bc,EAAQyC,SAAY,KACvEqF,EAAcuC,EAAU,GAAD,OAAInL,GAAJ,OAA8Bc,EAAQyC,SAAY,KAC/E6F,EAAkB,GAAD,OAAIpJ,GAAJ,OAA2Bc,EAAQyC,QAAWkF,EAC/DW,EAAkB,GAAD,OAAIpJ,GAAJ,OAA4Bc,EAAQyC,QAAWmF,EAChEU,EAAkB,GAAD,OAAIpJ,GAAJ,OAA6Bc,EAAQyC,QAAWoF,EACjES,EAAkB,GAAD,OAAIpJ,GAAJ,OAA8Bc,EAAQyC,QAAWqF,EAElE,IAAIC,EAAUsC,EAAU,UAAD,OAAWrK,EAAQyC,SAAY,KAEjDsF,GAA6B,UAAlB/H,EAAQyC,QACtBsF,EAjLM,YAkKuB,MAmBN,CAACJ,EAAUC,EAAWC,EAAYC,GAAahI,KACtE,SAAC2C,GAAD,OAAW+D,OAAOA,OAAQ/D,EAAQsF,EAAW,KAASkB,QAAQ,KAAO,QApBxC,mBAmBxBd,EAnBwB,KAmBpBC,EAnBoB,KAmBhBkC,EAnBgB,KAmBZC,EAnBY,KAsB/BjC,EAAkB,GAAD,OAAIpJ,GAAJ,OAA2Bc,EAAQyC,OAAnC,OAA2CtD,IAA+BgJ,EAC3FG,EAAkB,GAAD,OAAIpJ,GAAJ,OAA4Bc,EAAQyC,OAApC,OAA4CtD,IAA+BiJ,EAC5FE,EAAkB,GAAD,OAAIpJ,GAAJ,OAA6Bc,EAAQyC,OAArC,OAA6CtD,IAA+BmL,EAC7FhC,EAAkB,GAAD,OAAIpJ,GAAJ,OAA8Bc,EAAQyC,OAAtC,OAA8CtD,IAA+BoL,EAE9FrC,EAAmBlI,EAAS2H,EAAUC,EAAWO,EAAIC,EAAIC,EAAWC,IAzBtE,uBAAkC,IAFD,8BA6BjCA,EAAkBb,KAAO4C,EAAU5C,KACnCY,EAAU5C,KAAK6C,G,mCAInB5G,KAAKC,SAAS,CAAE6H,iBAAkBzE,EAAWmF,iBAAkB7B,I,iMAGjDtD,G,iFACRrD,KAAKuI,QAAQlF,G,sIAGX,IAAD,SAC6DrD,KAAKrB,MAAjEkJ,EADD,EACCA,oBAAqBC,EADtB,EACsBA,iBAAkBU,EADxC,EACwCA,iBAE/C,OADAM,QAAQC,IAAIP,GAEV,yBAAKvK,UAAU,OACb,yBAAKA,UAAU,YAAf,mBACkB,uBAAG+K,KAAK,8CAAR,WAElB,yBAAK/K,UAAU,aAAf,qBACoB,uBAAG+K,KAAK,yCAAR,QADpB,SACmF,IACjF,uBAAGA,KAAK,gDAAR,cAEF,4BAAQ/K,UAAU,cAChB,yBAAKC,MAAO,CAAEe,MAAO,QACnB,kBAAC,IAAD,CACEgK,SAAO,EACPC,QAASrB,EACTsB,SAAU,SAAClE,GAAD,OAAW,EAAKmE,UAAUnE,IACpCoE,aAActE,EACduE,OAAQ9B,EACRzG,MAAO+G,KAGX,yBAAK5J,MAAO,CAAEe,MAAO,MAAOC,OAAQ,SAChCsJ,GAAoB,aACtB,kBAAC,EAAD,CAAalI,WAAYkI,EAAkBnF,UAAWyE,EAAiB1J,KAAI,SAACE,GAAD,OAAaA,EAAQyC,kB,GAtG1F4D,aC1HE4E,QACW,cAA7BC,OAAO9D,SAAS+D,UAEe,UAA7BD,OAAO9D,SAAS+D,UAEhBD,OAAO9D,SAAS+D,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.0b6a24f1.chunk.js","sourcesContent":["export const DATA_TYPES = {\n  NEW_CASES: 'newCases',\n  NEW_DEATHS: 'newDeaths',\n  TOTAL_DEATHS: 'totalDeaths',\n  TOTAL_CASES: 'totalCases',\n}\n\nexport const DATA_MODIFIERS = {\n  ROLLING: 'Rolling',\n  PER_CAPITA: 'PerCapita',\n}\n","import React, { Component } from 'react'\nimport { setDifference } from '../utils/set-diff'\nimport { DATA_MODIFIERS, DATA_TYPES } from '../utils/constants'\nimport { Legend, Label, Line, LineChart, ResponsiveContainer, Surface, Symbols, Tooltip, XAxis, YAxis } from 'recharts'\n\nconst distinguishableColors = [\n  '#426600',\n  '#FF0010',\n  '#990000',\n  '#E0FF66',\n  '#FFFF80',\n  '#F0A3FF',\n  '#993F00',\n  '#005C31',\n  '#2BCE48',\n  '#FFCC99',\n  '#808080',\n  '#94FFB5',\n  '#8F7C00',\n  '#FFA405',\n  '#5EF1F2',\n  '#9DCC00',\n  '#FFFFFF',\n  '#C20088',\n  '#FFA8BB',\n  '#0075DC',\n  '#00998F',\n  '#740AFF',\n  '#FFFF00',\n  '#FF5005',\n]\n\nconst calcPrioritizedKeys = (dataPoints, countries) => {\n  const maxPerDataKey = {}\n  for (const country of countries) {\n    maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}`] = 0\n    maxPerDataKey[`${DATA_TYPES.TOTAL_CASES}${country}`] = 0\n    maxPerDataKey[`${DATA_TYPES.TOTAL_DEATHS}${country}`] = 0\n    maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}`] = 0\n\n    maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}`] = 0\n    maxPerDataKey[`${DATA_TYPES.TOTAL_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}`] = 0\n    maxPerDataKey[`${DATA_TYPES.TOTAL_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}`] = 0\n    maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}`] = 0\n\n    maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.ROLLING}`] = 0\n    maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.ROLLING}`] = 0\n    maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`] = 0\n    maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`] = 0\n\n    for (const entry of dataPoints) {\n      if (entry[`${DATA_TYPES.NEW_CASES}${country}`] > maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}`]) {\n        maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}`] = entry[`${DATA_TYPES.NEW_CASES}${country}`]\n        maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}`] =\n          entry[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}`]\n      }\n      if (entry[`${DATA_TYPES.TOTAL_CASES}${country}`] > maxPerDataKey[`${DATA_TYPES.TOTAL_CASES}${country}`]) {\n        maxPerDataKey[`${DATA_TYPES.TOTAL_CASES}${country}`] = entry[`${DATA_TYPES.TOTAL_CASES}${country}`]\n        maxPerDataKey[`${DATA_TYPES.TOTAL_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}`] =\n          entry[`${DATA_TYPES.TOTAL_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}`]\n      }\n      if (entry[`${DATA_TYPES.TOTAL_DEATHS}${country}`] > maxPerDataKey[`${DATA_TYPES.TOTAL_DEATHS}${country}`]) {\n        maxPerDataKey[`${DATA_TYPES.TOTAL_DEATHS}${country}`] = entry[`${DATA_TYPES.TOTAL_DEATHS}${country}`]\n        maxPerDataKey[`${DATA_TYPES.TOTAL_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}`] =\n          entry[`${DATA_TYPES.TOTAL_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}`]\n      }\n      if (entry[`${DATA_TYPES.NEW_DEATHS}${country}`] > maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}`]) {\n        maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}`] = entry[`${DATA_TYPES.NEW_DEATHS}${country}`]\n        maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}`] =\n          entry[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}`]\n      }\n      if (\n        entry[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.ROLLING}`] >\n        maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.ROLLING}`]\n      ) {\n        maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.ROLLING}`] =\n          entry[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.ROLLING}`]\n        maxPerDataKey[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`] =\n          entry[`${DATA_TYPES.NEW_DEATHS}${country}${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`]\n      }\n      if (\n        entry[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.ROLLING}`] >\n        maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.ROLLING}`]\n      ) {\n        maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.ROLLING}`] =\n          entry[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.ROLLING}`]\n        maxPerDataKey[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`] =\n          entry[`${DATA_TYPES.NEW_CASES}${country}${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`]\n      }\n    }\n  }\n  const sortedKeys = Object.keys(maxPerDataKey)\n    .map((key) => {\n      return { key, value: maxPerDataKey[key] }\n      // Sort descending on value\n    })\n    .sort((a, b) => {\n      return b.value - a.value\n    })\n  return sortedKeys.map((sorted) => sorted.key)\n}\n\nclass CoronaChart extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { scale: 'linear', perCapita: false, rollingAverage: false }\n  }\n\n  handleClick(dataKey) {\n    if (this.state.disabled.includes(dataKey)) {\n      this.setState({ disabled: this.state.disabled.filter((obj) => obj !== dataKey) })\n    } else {\n      this.setState({ disabled: this.state.disabled.concat(dataKey) })\n    }\n  }\n\n  handleOptionChange(scale) {\n    this.setState({\n      scale,\n    })\n    this.forceUpdate()\n  }\n\n  handlePerCapitaChange(perCapita) {\n    this.setState({\n      perCapita,\n    })\n    this.forceUpdate()\n  }\n  handleRollingAverageChange(rollingAverage) {\n    this.setState({\n      rollingAverage,\n    })\n    this.forceUpdate()\n  }\n\n  renderCustomizedLegend = ({ payload }) => {\n    let currentCountry = ''\n    let countryHeader = null\n    return (\n      <div className=\"customized-legend\" style={{ marginBottom: 40 }}>\n        {payload.map((entry) => {\n          if (currentCountry !== entry.country) {\n            currentCountry = entry.country\n            countryHeader = (\n              <span className=\"Legend-country\">\n                <br />\n                {entry.country}\n                <br />\n              </span>\n            )\n          } else {\n            countryHeader = null\n          }\n          const { dataKey, color, label } = entry\n          const inActive = this.state.disabled.includes(dataKey)\n          const style = {\n            marginRight: 10,\n            color: '#AAA',\n          }\n\n          return (\n            <span>\n              {countryHeader}\n              <span onClick={() => this.handleClick(dataKey)} style={style}>\n                <Surface width={20} height={20} style={{ marginBottom: -5 }}>\n                  <Symbols cx={10} cy={10} type=\"circle\" size={50} fill={color} />\n                </Surface>\n                <input type=\"checkbox\" checked={!inActive} />\n                <span className=\"Legend-per-country\">{label}</span>\n              </span>\n            </span>\n          )\n        })}\n      </div>\n    )\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { dataPoints, countries } = props\n    if (!dataPoints || state.prevCountries === countries) {\n      return null\n    }\n\n    if (state.prevCountries) {\n      const prev = new Set(state.prevCountries)\n      const current = new Set(countries)\n\n      const removedCountries = setDifference(prev, current)\n      // Push the old used colors back into the available pool\n      // Remove chartLines if country no longer selected\n      for (let i = state.chartLines.length - 1; i >= 0; i--) {\n        if (removedCountries.has(state.chartLines[i].country)) {\n          distinguishableColors.push(state.chartLines[i].color)\n          state.chartLines.splice(state.chartLines.indexOf(state.chartLines[i]), 1)\n        }\n      }\n\n      // Remove disabled lengends if country no longer selected\n      for (let i = state.disabled.length - 1; i >= 0; i--) {\n        let removed = false\n        for (const removedCountry of removedCountries) {\n          if (state.disabled[i].includes(removedCountry)) {\n            removed = true\n          }\n        }\n        if (removed) {\n          state.disabled.splice(state.disabled.indexOf(state.disabled[i]), 1)\n        }\n      }\n    }\n\n    const chartLines = state.chartLines || []\n    const disabled = state.disabled || []\n    for (const country of countries) {\n      if (!state.prevCountries || (state.prevCountries && !state.prevCountries.includes(country))) {\n        chartLines.push({\n          country,\n          dataKey: `${DATA_TYPES.NEW_CASES}${country}`,\n          color: distinguishableColors.pop(),\n          label: `New cases`,\n        })\n        chartLines.push({\n          country,\n          dataKey: `${DATA_TYPES.NEW_DEATHS}${country}`,\n          color: distinguishableColors.pop(),\n          label: `New deaths`,\n        })\n        chartLines.push({\n          country,\n          dataKey: `${DATA_TYPES.TOTAL_CASES}${country}`,\n          color: distinguishableColors.pop(),\n          label: `Total cases`,\n        })\n        chartLines.push({\n          country,\n          dataKey: `${DATA_TYPES.TOTAL_DEATHS}${country}`,\n          color: distinguishableColors.pop(),\n          label: `Total deaths`,\n        })\n        disabled.push(`${DATA_TYPES.TOTAL_CASES}${country}`)\n        disabled.push(`${DATA_TYPES.TOTAL_DEATHS}${country}`)\n      }\n    }\n\n    const yLabelPrioritizedKeys = calcPrioritizedKeys(dataPoints, countries)\n\n    return {\n      chartLines,\n      disabled,\n      prevCountries: countries,\n      yLabelPrioritizedKeys,\n    }\n  }\n\n  getMaxNonDisabled = () => {\n    for (const key of this.state.yLabelPrioritizedKeys) {\n      // Filter out keys based on perCapita and rollingAverage choice\n      if (!this.state.perCapita && !this.state.rollingAverage) {\n        if (key.includes(`${DATA_MODIFIERS.PER_CAPITA}`) || key.includes(`${DATA_MODIFIERS.ROLLING}`)) {\n          continue\n        }\n      } else if (this.state.perCapita && this.state.rollingAverage) {\n        if (\n          !(key.includes(`total`) && key.includes(`${DATA_MODIFIERS.PER_CAPITA}`)) &&\n          !key.includes(`${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`)\n        ) {\n          continue\n        }\n      } else if (!this.state.perCapita && this.state.rollingAverage) {\n        if (\n          key.includes(`${DATA_MODIFIERS.PER_CAPITA}`) ||\n          (key.includes(`new`) && !key.includes(`${DATA_MODIFIERS.ROLLING}`))\n        ) {\n          continue\n        }\n      } else if (this.state.perCapita && !this.state.rollingAverage) {\n        if (!key.includes(`${DATA_MODIFIERS.PER_CAPITA}`) || key.includes(`${DATA_MODIFIERS.ROLLING}`)) {\n          continue\n        }\n      }\n      // Find the first non disabled key\n      let disabled = false\n      for (const disabledKey of this.state.disabled) {\n        // Use includes to also catch the perCapita and rollingAverage keys, e.g. newCasesSpainPerCapita would still match 'newCasesSpain'\n        if (key.includes(disabledKey)) {\n          disabled = true\n          break\n        }\n      }\n      if (!disabled) {\n        return key\n      }\n    }\n    return ''\n  }\n\n  render() {\n    const { dataPoints } = this.props\n\n    if (!dataPoints) {\n      return null\n    }\n\n    const data = dataPoints\n    const perCapita = this.state.perCapita ? `${DATA_MODIFIERS.PER_CAPITA}` : ''\n    const rollingAverage = this.state.rollingAverage ? `${DATA_MODIFIERS.ROLLING}` : ''\n\n    // Set the minimum y axis value based on log/linear and whether perCapita is enabled\n    let yAxisDomain = [0, 'dataMax']\n    if (this.state.scale === 'log' && this.state.perCapita) {\n      yAxisDomain = [0.01, 'dataMax']\n    } else if (this.state.scale === 'log' && !this.state.perCapita) {\n      yAxisDomain = [1, 'dataMax']\n    }\n\n    // Figure out which of the currently enabled keys is the first in the yLabelPrioritizedKeys list (including whether they are PerCapita or Rolling keys)\n    let yAxisMaxKey = this.getMaxNonDisabled()\n\n    return (\n      <div>\n        <div style={{ width: '85%', display: 'inline-block' }}>\n          <span style={{ float: 'left', 'margin-left': '1rem' }}>\n            <span onClick={() => this.handleOptionChange('linear')}>\n              <input type=\"radio\" id=\"linear\" name=\"scale\" value=\"linear\" checked={this.state.scale === 'linear'} />\n              <span style={{ color: '#AAA' }}>Linear</span>\n            </span>\n            <span onClick={() => this.handleOptionChange('log')}>\n              <input type=\"radio\" id=\"log\" name=\"scale\" value=\"log\" checked={this.state.scale === 'log'} />\n              <span style={{ color: '#AAA' }}>Log</span>\n            </span>\n          </span>\n          <span\n            style={{ float: 'right', 'margin-right': '1rem' }}\n            onClick={() => this.handlePerCapitaChange(!this.state.perCapita)}\n          >\n            <input type=\"checkbox\" id=\"perCapita\" name=\"perCapita\" checked={this.state.perCapita} />\n            <span style={{ color: '#AAA' }}>Per Million Capita</span>\n          </span>\n          <span\n            style={{ float: 'right', 'margin-right': '1rem' }}\n            onClick={() => this.handleRollingAverageChange(!this.state.rollingAverage)}\n          >\n            <input type=\"checkbox\" id=\"rollingAverage\" name=\"rollingAverage\" checked={this.state.rollingAverage} />\n            <span style={{ color: '#AAA' }}>7 day rolling average</span>\n          </span>\n        </div>\n        <ResponsiveContainer height={800} className=\"chart-container\">\n          <LineChart width={800} height={800} data={data} margin={{ top: 25, right: 25, left: 25, bottom: 25 }}>\n            {this.state.chartLines\n              .filter((chartLine) => !this.state.disabled.includes(chartLine.dataKey))\n              .map((chartLine) => (\n                <Line\n                  connectNulls\n                  name={`${chartLine.country} ${chartLine.label.toLowerCase()}`}\n                  type=\"monotone\"\n                  dataKey={\n                    chartLine.dataKey.includes('total')\n                      ? `${chartLine.dataKey}${perCapita}`\n                      : `${chartLine.dataKey}${perCapita}${rollingAverage}`\n                  }\n                  stroke={chartLine.color}\n                  yAxisId={0}\n                  dot={{ r: 2 }}\n                />\n              ))}\n            <XAxis\n              dataKey=\"date\"\n              textAnchor=\"end\"\n              tick={{ angle: -70, fontSize: 20 }}\n              height={225}\n              padding={{ right: 3, left: 3 }}\n            />\n\n            <YAxis\n              dataKey={yAxisMaxKey}\n              domain={yAxisDomain}\n              tick={{ angle: -45, fontSize: 15 }}\n              width={40}\n              scale={this.state.scale}\n              allowDataOverflow\n              padding={{ top: 3, bottom: 3 }}\n            >\n              {/* <Label value=\"Persons\" angle={-90} position=\"insideBottomLeft\" offset={1} style={{ fontSize: '80%', fill: 'rgba(0, 204, 102, 0.70)' }}></Label> */}\n            </YAxis>\n            <Tooltip\n              formatter={(value, name) => [\n                value === null ? 0 : value,\n                `${name} ${this.state.perCapita ? 'per million' : ''}`,\n              ]}\n              itemSorter={(item) => -item.value}\n              filterNull={false}\n              wrapperStyle={{\n                borderColor: 'white',\n                boxShadow: '2px 2px 3px 0px rgb(204, 204, 204)',\n              }}\n              contentStyle={{ backgroundColor: 'rgba(255, 255, 255, 0.8)' }}\n              labelStyle={{ fontWeight: 'bold', color: '#666666' }}\n            />\n            <Legend\n              wrapperStyle={{ top: 550 }}\n              align=\"center\"\n              height={100}\n              content={this.renderCustomizedLegend}\n              payload={this.state.chartLines}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  }\n}\n\nexport default CoronaChart\n","export const setDifference = (a, b) => new Set([...a].filter((x) => !b.has(x)))\n","export const formatStringToNumberOrNull = (strigWithNumber) => {\n  return Number(strigWithNumber) === 0 ? null : Number(strigWithNumber)\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport axios from 'axios'\nimport Select from 'react-select'\nimport CoronaChart from './components/line-chart'\nimport { DATA_MODIFIERS, DATA_TYPES } from './utils/constants'\nimport { formatStringToNumberOrNull } from './utils/data-format'\n\nconst WORLD_POP = 7794798729\nconst endpoint = 'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/ecdc/full_data.csv'\nconst locationsEndpoint = 'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/ecdc/locations.csv'\nconst initialCountries = [\n  { value: 'Italy', label: 'Italy' },\n  { value: 'Spain', label: 'Spain' },\n]\nconst ROLLING_AVERAGE_DAYS = 7\n\nconst parseData = (input, locations) => {\n  const newExtraction = {}\n  const countries = {}\n  const dataPerLine = String(input).split('\\n')\n  const locationLines = String(locations).split('\\n')\n  const popDict = {}\n  locationLines.splice(1, locationLines.length).map((row) => {\n    const [, location, , , population] = row.split(',')\n    popDict[location] = population\n  })\n  let header = true\n  const firstDataPointPerPlace = {}\n  for (const line of dataPerLine) {\n    if (header) {\n      header = false\n      continue\n    }\n    const [date, place, newCases, newDeaths, totalCases, totalDeaths] = line.split(',')\n    if (!place) {\n      continue\n    }\n    const popData = popDict[place]\n    countries[place] = true\n    if (!firstDataPointPerPlace[place]) {\n      if (Number(newCases) === 0 && Number(newDeaths) === 0 && Number(totalCases) === 0 && Number(totalDeaths) === 0) {\n        continue\n      } else {\n        firstDataPointPerPlace[place] = true\n      }\n    }\n    if (!newExtraction[date]) {\n      newExtraction[date] = {\n        date: date,\n        [`${DATA_TYPES.NEW_CASES}${place}`]: formatStringToNumberOrNull(newCases),\n        [`${DATA_TYPES.NEW_DEATHS}${place}`]: formatStringToNumberOrNull(newDeaths),\n        [`${DATA_TYPES.TOTAL_CASES}${place}`]: formatStringToNumberOrNull(totalCases),\n        [`${DATA_TYPES.TOTAL_DEATHS}${place}`]: formatStringToNumberOrNull(totalDeaths),\n        [`popData${place}`]: formatStringToNumberOrNull(popData),\n      }\n    } else {\n      newExtraction[date][`${DATA_TYPES.NEW_CASES}${place}`] = formatStringToNumberOrNull(newCases)\n      newExtraction[date][`${DATA_TYPES.NEW_DEATHS}${place}`] = formatStringToNumberOrNull(newDeaths)\n      newExtraction[date][`${DATA_TYPES.TOTAL_CASES}${place}`] = formatStringToNumberOrNull(totalCases)\n      newExtraction[date][`${DATA_TYPES.TOTAL_DEATHS}${place}`] = formatStringToNumberOrNull(totalDeaths)\n      newExtraction[date][`popData${place}`] = formatStringToNumberOrNull(popData)\n    }\n  }\n\n  // Resort the data on date\n  const dataPoints = Object.values(newExtraction).sort((a, b) => {\n    return a.date.localeCompare(b.date)\n  })\n\n  return [dataPoints, Object.keys(countries)]\n}\n\n// Create a seven day rolling average for the daily stats\nconst addRollingAverages = (country, newCases, newDeaths, nc, nd, multiData, filteredDataPoint) => {\n  let rollingFigures = [\n    {\n      useDataKey: `${DATA_TYPES.NEW_CASES}${country.value}`,\n      newDataKey: `${DATA_TYPES.NEW_CASES}${country.value}${DATA_MODIFIERS.ROLLING}`,\n      sum: 0,\n      entries: 0,\n      dataToday: newCases,\n    },\n    {\n      useDataKey: `${DATA_TYPES.NEW_DEATHS}${country.value}`,\n      newDataKey: `${DATA_TYPES.NEW_DEATHS}${country.value}${DATA_MODIFIERS.ROLLING}`,\n      sum: 0,\n      entries: 0,\n      dataToday: newDeaths,\n    },\n    {\n      useDataKey: `${DATA_TYPES.NEW_CASES}${country.value}${DATA_MODIFIERS.PER_CAPITA}`,\n      newDataKey: `${DATA_TYPES.NEW_CASES}${country.value}${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`,\n      sum: 0,\n      entries: 0,\n      dataToday: nc,\n    },\n    {\n      useDataKey: `${DATA_TYPES.NEW_DEATHS}${country.value}${DATA_MODIFIERS.PER_CAPITA}`,\n      newDataKey: `${DATA_TYPES.NEW_DEATHS}${country.value}${DATA_MODIFIERS.PER_CAPITA}${DATA_MODIFIERS.ROLLING}`,\n      sum: 0,\n      entries: 0,\n      dataToday: nd,\n    },\n  ]\n  // Make sure there's enough data for a rolling average\n  if (multiData.length >= ROLLING_AVERAGE_DAYS - 1) {\n    for (const rollingFigure of rollingFigures) {\n      // Go six days back and add current\n      for (let i = 0; i < ROLLING_AVERAGE_DAYS - 1; i++) {\n        let dailyStat = multiData[multiData.length - i - 1][rollingFigure.useDataKey]\n        if (dailyStat != null && !isNaN(dailyStat)) {\n          rollingFigure.sum += dailyStat\n          rollingFigure.entries += 1\n        }\n      }\n      if (rollingFigure.dataToday && !isNaN(rollingFigure.dataToday)) {\n        rollingFigure.sum += rollingFigure.dataToday\n        rollingFigure.entries += 1\n      }\n\n      // Get the average and round to float\n      filteredDataPoint[rollingFigure.newDataKey] = Number(Number(rollingFigure.sum / rollingFigure.entries).toFixed(2))\n    }\n  }\n}\n\nconst customStyles = {\n  option: (provided, state) => ({\n    ...provided,\n    color: state.isSelected ? 'orange' : 'black',\n  }),\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      selectableCountries: initialCountries,\n      currentCountries: initialCountries,\n    }\n  }\n\n  async componentDidMount() {\n    const [res, locations] = await Promise.all([axios.get(`${endpoint}`), axios.get(`${locationsEndpoint}`)])\n    const [parsed, countries] = parseData(res.data, locations.data)\n    const labels = countries.map((key) => ({ value: key, label: key }))\n    this.setState({ selectableCountries: labels, newParsedData: parsed })\n    await this.getData(initialCountries)\n  }\n\n  async getData(countries) {\n    if (!countries || countries.length === 0) {\n      this.setState({ currentCountries: [], multiCountryData: [] })\n      return\n    }\n    const newParsed = this.state.newParsedData\n    const multiData = []\n    // Build data set with only the selected countries and only after they started getting data\n    let includeDataPointsGoingForward = false\n    for (const dataPoint of Object.values(newParsed)) {\n      // Find the first datapoint for any of the countries\n      if (!includeDataPointsGoingForward) {\n        for (const country of countries) {\n          if (dataPoint[`${DATA_TYPES.NEW_CASES}${country.value}`]) {\n            includeDataPointsGoingForward = true\n            break\n          }\n        }\n      }\n      if (includeDataPointsGoingForward) {\n        const filteredDataPoint = {}\n        for (const country of countries) {\n          const newCases = dataPoint[`${DATA_TYPES.NEW_CASES}${country.value}`] || null\n          const newDeaths = dataPoint[`${DATA_TYPES.NEW_DEATHS}${country.value}`] || null\n          const totalCases = dataPoint[`${DATA_TYPES.TOTAL_CASES}${country.value}`] || null\n          const totalDeaths = dataPoint[`${DATA_TYPES.TOTAL_DEATHS}${country.value}`] || null\n          filteredDataPoint[`${DATA_TYPES.NEW_CASES}${country.value}`] = newCases\n          filteredDataPoint[`${DATA_TYPES.NEW_DEATHS}${country.value}`] = newDeaths\n          filteredDataPoint[`${DATA_TYPES.TOTAL_CASES}${country.value}`] = totalCases\n          filteredDataPoint[`${DATA_TYPES.TOTAL_DEATHS}${country.value}`] = totalDeaths\n\n          let popData = dataPoint[`popData${country.value}`] || null\n          // Hardcode world population since it's not in the source\n          if (!popData && country.value === 'World') {\n            popData = WORLD_POP\n          }\n\n          // Get data per million capita and use very hackish way to round floats\n          const [nc, nd, tc, td] = [newCases, newDeaths, totalCases, totalDeaths].map(\n            (value) => Number(Number((value / popData) * 1000000).toFixed(2)) || null\n          )\n          filteredDataPoint[`${DATA_TYPES.NEW_CASES}${country.value}${DATA_MODIFIERS.PER_CAPITA}`] = nc\n          filteredDataPoint[`${DATA_TYPES.NEW_DEATHS}${country.value}${DATA_MODIFIERS.PER_CAPITA}`] = nd\n          filteredDataPoint[`${DATA_TYPES.TOTAL_CASES}${country.value}${DATA_MODIFIERS.PER_CAPITA}`] = tc\n          filteredDataPoint[`${DATA_TYPES.TOTAL_DEATHS}${country.value}${DATA_MODIFIERS.PER_CAPITA}`] = td\n\n          addRollingAverages(country, newCases, newDeaths, nc, nd, multiData, filteredDataPoint)\n        }\n        filteredDataPoint.date = dataPoint.date\n        multiData.push(filteredDataPoint)\n      }\n    }\n\n    this.setState({ currentCountries: countries, multiCountryData: multiData })\n  }\n\n  async _onChange(countries) {\n    await this.getData(countries)\n  }\n\n  render() {\n    const { selectableCountries, currentCountries, multiCountryData } = this.state\n    console.log(multiCountryData)\n    return (\n      <div className=\"App\">\n        <div className=\"Top-left\">\n          Source code on: <a href=\"https://github.com/mathiastj/corona-graphs\">GitHub</a>\n        </div>\n        <div className=\"Top-right\">\n          Sources: ECDC via <a href=\"https://github.com/owid/covid-19-data\">OWID</a> under{' '}\n          <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0</a>\n        </div>\n        <header className=\"App-header\">\n          <div style={{ width: '80%' }}>\n            <Select\n              isMulti\n              options={selectableCountries}\n              onChange={(input) => this._onChange(input)}\n              defaultValue={initialCountries}\n              styles={customStyles}\n              value={currentCountries}\n            />\n          </div>\n          <div style={{ width: '99%', height: '90%' }}>\n            {!multiCountryData && 'Loading...'}\n            <CoronaChart dataPoints={multiCountryData} countries={currentCountries.map((country) => country.value)} />\n          </div>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}