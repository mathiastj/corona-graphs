{"version":3,"sources":["components/line-chart.js","utils/set-diff.js","utils/data-format.js","App.js","serviceWorker.js","index.js"],"names":["distinguishableColors","CoronaChart","props","renderCustomizedLegend","payload","currentCountry","countryHeader","className","style","marginBottom","map","entry","country","dataKey","color","label","inActive","state","disabled","includes","onClick","handleClick","marginRight","width","height","cx","cy","type","size","fill","checked","getMaxNonDisabled","yLabelPrioritizedKeys","key","perCapita","disabledKey","scale","this","setState","filter","obj","concat","forceUpdate","dataPoints","data","yAxisMaxKey","display","float","handleOptionChange","id","name","value","handlePerCapitaChange","margin","top","right","left","bottom","chartLines","chartLine","connectNulls","toLowerCase","stroke","yAxisId","dot","r","textAnchor","tick","angle","fontSize","padding","domain","allowDataOverflow","formatter","itemSorter","item","filterNull","wrapperStyle","borderColor","boxShadow","contentStyle","backgroundColor","labelStyle","fontWeight","align","content","a","b","countries","prevCountries","prev","Set","current","removedCountries","x","has","i","length","push","splice","indexOf","removed","removedCountry","pop","maxPerDataKey","Object","keys","sort","sorted","calcPrioritizedKeys","Component","formatStringToNumberOrNull","strigWithNumber","Number","initialCountries","parseData","input","locations","newExtraction","dataPerLine","String","split","locationLines","popDict","row","location","population","header","firstDataPointPerPlace","line","date","place","newCases","newDeaths","totalCases","totalDeaths","popData","dateFormatted","Date","toISOString","substring","currentData","values","localeCompare","customStyles","option","provided","isSelected","App","selectableCountries","currentCountries","Promise","all","axios","get","res","parsed","labels","newParsedData","getData","multiCountryData","newParsed","multiData","includeDataPointsGoingForward","dataPoint","filteredDataPoint","toFixed","nc","nd","tc","td","href","isMulti","options","onChange","_onChange","defaultValue","styles","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f776265c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { setDifference } from '../utils/set-diff'\nimport { Legend, Label, Line, LineChart, ResponsiveContainer, Surface, Symbols, Tooltip, XAxis, YAxis } from 'recharts'\n\nconst distinguishableColors = [\n  '#426600',\n  '#FF0010',\n  '#990000',\n  '#E0FF66',\n  '#FFFF80',\n  '#F0A3FF',\n  '#993F00',\n  '#005C31',\n  '#2BCE48',\n  '#FFCC99',\n  '#808080',\n  '#94FFB5',\n  '#8F7C00',\n  '#FFA405',\n  '#5EF1F2',\n  '#9DCC00',\n  '#FFFFFF',\n  '#C20088',\n  '#FFA8BB',\n  '#0075DC',\n  '#00998F',\n  '#740AFF',\n  '#FFFF00',\n  '#FF5005',\n]\n\nconst calcPrioritizedKeys = (dataPoints, countries) => {\n  const maxPerDataKey = {}\n  for (const country of countries) {\n    maxPerDataKey[`newCases${country}`] = 0\n    maxPerDataKey[`totalCases${country}`] = 0\n    maxPerDataKey[`totalDeaths${country}`] = 0\n    maxPerDataKey[`newDeaths${country}`] = 0\n\n    maxPerDataKey[`newCases${country}PerCapita`] = 0\n    maxPerDataKey[`totalCases${country}PerCapita`] = 0\n    maxPerDataKey[`totalDeaths${country}PerCapita`] = 0\n    maxPerDataKey[`newDeaths${country}PerCapita`] = 0\n\n    for (const entry of dataPoints) {\n      if (entry[`newCases${country}`] > maxPerDataKey[`newCases${country}`]) {\n        maxPerDataKey[`newCases${country}`] = entry[`newCases${country}`]\n        maxPerDataKey[`newCases${country}PerCapita`] = entry[`newCases${country}PerCapita`]\n      }\n      if (entry[`totalCases${country}`] > maxPerDataKey[`totalCases${country}`]) {\n        maxPerDataKey[`totalCases${country}`] = entry[`totalCases${country}`]\n        maxPerDataKey[`totalCases${country}PerCapita`] = entry[`totalCases${country}PerCapita`]\n      }\n      if (entry[`totalDeaths${country}`] > maxPerDataKey[`totalDeaths${country}`]) {\n        maxPerDataKey[`totalDeaths${country}`] = entry[`totalDeaths${country}`]\n        maxPerDataKey[`totalDeaths${country}PerCapita`] = entry[`totalDeaths${country}PerCapita`]\n      }\n      if (entry[`newDeaths${country}`] > maxPerDataKey[`newDeaths${country}`]) {\n        maxPerDataKey[`newDeaths${country}`] = entry[`newDeaths${country}`]\n        maxPerDataKey[`newDeaths${country}PerCapita`] = entry[`newDeaths${country}PerCapita`]\n      }\n    }\n  }\n  const sortedKeys = Object.keys(maxPerDataKey)\n    .map((key) => {\n      return { key, value: maxPerDataKey[key] }\n      // Sort descending on value\n    })\n    .sort((a, b) => {\n      return b.value - a.value\n    })\n  return sortedKeys.map((sorted) => sorted.key)\n}\n\nclass CoronaChart extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { scale: 'linear', perCapita: false }\n  }\n\n  handleClick(dataKey) {\n    if (this.state.disabled.includes(dataKey)) {\n      this.setState({ disabled: this.state.disabled.filter((obj) => obj !== dataKey) })\n    } else {\n      this.setState({ disabled: this.state.disabled.concat(dataKey) })\n    }\n  }\n\n  handleOptionChange(scale) {\n    this.setState({\n      scale,\n    })\n    this.forceUpdate()\n  }\n\n  handlePerCapitaChange(perCapita) {\n    this.setState({\n      perCapita,\n    })\n    this.forceUpdate()\n  }\n\n  renderCustomizedLegend = ({ payload }) => {\n    let currentCountry = ''\n    let countryHeader = null\n    return (\n      <div className=\"customized-legend\" style={{ marginBottom: 40 }}>\n        {payload.map((entry) => {\n          if (currentCountry !== entry.country) {\n            currentCountry = entry.country\n            countryHeader = (\n              <span className=\"Legend-country\">\n                <br />\n                {entry.country}\n                <br />\n              </span>\n            )\n          } else {\n            countryHeader = null\n          }\n          const { dataKey, color, label } = entry\n          const inActive = this.state.disabled.includes(dataKey)\n          const style = {\n            marginRight: 10,\n            color: '#AAA',\n          }\n\n          return (\n            <span>\n              {countryHeader}\n              <span onClick={() => this.handleClick(dataKey)} style={style}>\n                <Surface width={20} height={20} style={{ marginBottom: -5 }}>\n                  <Symbols cx={10} cy={10} type=\"circle\" size={50} fill={color} />\n                </Surface>\n                <input type=\"checkbox\" checked={!inActive} />\n                <span className=\"Legend-per-country\">{label}</span>\n              </span>\n            </span>\n          )\n        })}\n      </div>\n    )\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { dataPoints, countries } = props\n    if (!dataPoints || state.prevCountries === countries) {\n      return null\n    }\n\n    if (state.prevCountries) {\n      const prev = new Set(state.prevCountries)\n      const current = new Set(countries)\n\n      const removedCountries = setDifference(prev, current)\n      // Push the old used colors back into the available pool\n      // Remove chartLines if country no longer selected\n      for (let i = state.chartLines.length - 1; i >= 0; i--) {\n        if (removedCountries.has(state.chartLines[i].country)) {\n          distinguishableColors.push(state.chartLines[i].color)\n          state.chartLines.splice(state.chartLines.indexOf(state.chartLines[i]), 1)\n        }\n      }\n\n      // Remove disabled lengends if country no longer selected\n      for (let i = state.disabled.length - 1; i >= 0; i--) {\n        let removed = false\n        for (const removedCountry of removedCountries) {\n          if (state.disabled[i].includes(removedCountry)) {\n            removed = true\n          }\n        }\n        if (removed) {\n          state.disabled.splice(state.disabled.indexOf(state.disabled[i]), 1)\n        }\n      }\n    }\n\n    const chartLines = state.chartLines || []\n    const disabled = state.disabled || []\n    for (const country of countries) {\n      if (!state.prevCountries || (state.prevCountries && !state.prevCountries.includes(country))) {\n        chartLines.push({\n          country,\n          dataKey: `newCases${country}`,\n          color: distinguishableColors.pop(),\n          label: `New cases`,\n        })\n        chartLines.push({\n          country,\n          dataKey: `newDeaths${country}`,\n          color: distinguishableColors.pop(),\n          label: `New deaths`,\n        })\n        chartLines.push({\n          country,\n          dataKey: `totalCases${country}`,\n          color: distinguishableColors.pop(),\n          label: `Total cases`,\n        })\n        chartLines.push({\n          country,\n          dataKey: `totalDeaths${country}`,\n          color: distinguishableColors.pop(),\n          label: `Total deaths`,\n        })\n        disabled.push(`totalCases${country}`)\n        disabled.push(`totalDeaths${country}`)\n      }\n    }\n\n    const yLabelPrioritizedKeys = calcPrioritizedKeys(dataPoints, countries)\n\n    return {\n      chartLines,\n      disabled,\n      prevCountries: countries,\n      yLabelPrioritizedKeys,\n    }\n  }\n\n  getMaxNonDisabled = () => {\n    for (const key of this.state.yLabelPrioritizedKeys) {\n      // Filter out keys based on perCapita choice\n      if (this.state.perCapita) {\n        if (!key.includes('PerCapita')) {\n          continue\n        }\n      } else {\n        if (key.includes('PerCapita')) {\n          continue\n        }\n      }\n      // Find the first non disabled key\n      let disabled = false\n      for (const disabledKey of this.state.disabled) {\n        // Use includes since to catch the perCapita keys, e.g. newCasesSpainPerCapita would still match 'newCasesSpain'\n        if (key.includes(disabledKey)) {\n          disabled = true\n          break\n        }\n      }\n      if (!disabled) {\n        return key\n      }\n    }\n    return ''\n  }\n\n  render() {\n    const { dataPoints } = this.props\n\n    if (!dataPoints) {\n      return null\n    }\n\n    const data = dataPoints\n    const perCapita = this.state.perCapita ? 'PerCapita' : ''\n\n    // Figure out which of the currently enabled keys is the first in the yLabelPrioritizedKeys list (including whether they are PerCapita keys)\n    let yAxisMaxKey = this.getMaxNonDisabled()\n\n    return (\n      <div>\n        <div style={{ width: '85%', display: 'inline-block' }}>\n          <span style={{ float: 'left', 'margin-left': '1rem' }}>\n            <span onClick={() => this.handleOptionChange('linear')}>\n              <input type=\"radio\" id=\"linear\" name=\"scale\" value=\"linear\" checked={this.state.scale === 'linear'} />\n              <span style={{ color: '#AAA' }}>Linear</span>\n            </span>\n            <span onClick={() => this.handleOptionChange('log')}>\n              <input type=\"radio\" id=\"log\" name=\"scale\" value=\"log\" checked={this.state.scale === 'log'} />\n              <span style={{ color: '#AAA' }}>Log</span>\n            </span>\n          </span>\n          <span\n            style={{ float: 'right', 'margin-right': '1rem' }}\n            onClick={() => this.handlePerCapitaChange(!this.state.perCapita)}\n          >\n            <input type=\"checkbox\" id=\"perCapita\" name=\"perCapita\" checked={this.state.perCapita} />\n            <span style={{ color: '#AAA' }}>Per Million Capita</span>\n          </span>\n        </div>\n        <ResponsiveContainer height={800} className=\"chart-container\">\n          <LineChart width={800} height={800} data={data} margin={{ top: 25, right: 25, left: 40, bottom: 25 }}>\n            {this.state.chartLines\n              .filter((chartLine) => !this.state.disabled.includes(chartLine.dataKey))\n              .map((chartLine) => (\n                <Line\n                  connectNulls\n                  name={`${chartLine.country} ${chartLine.label.toLowerCase()}`}\n                  type=\"monotone\"\n                  dataKey={`${chartLine.dataKey}${perCapita}`}\n                  stroke={chartLine.color}\n                  yAxisId={0}\n                  dot={{ r: 2 }}\n                />\n              ))}\n            <XAxis\n              dataKey=\"date\"\n              textAnchor=\"end\"\n              tick={{ angle: -70, fontSize: 20 }}\n              height={225}\n              padding={{ right: 3, left: 3 }}\n            />\n\n            <YAxis\n              dataKey={yAxisMaxKey}\n              domain={this.state.scale === 'log' ? [1, 'dataMax'] : [0, 'dataMax']}\n              tick={{ fontSize: 20 }}\n              width={40}\n              scale={this.state.scale}\n              allowDataOverflow\n              padding={{ top: 3, bottom: 3 }}\n            >\n              {/* <Label value=\"Persons\" angle={-90} position=\"insideBottomLeft\" offset={1} style={{ fontSize: '80%', fill: 'rgba(0, 204, 102, 0.70)' }}></Label> */}\n              />\n            </YAxis>\n            <Tooltip\n              formatter={(value, name) => [\n                value === null ? 0 : value,\n                `${name} ${this.state.perCapita ? 'per million' : ''}`,\n              ]}\n              itemSorter={(item) => -item.value}\n              filterNull={false}\n              wrapperStyle={{\n                borderColor: 'white',\n                boxShadow: '2px 2px 3px 0px rgb(204, 204, 204)',\n              }}\n              contentStyle={{ backgroundColor: 'rgba(255, 255, 255, 0.8)' }}\n              labelStyle={{ fontWeight: 'bold', color: '#666666' }}\n            />\n            <Legend\n              wrapperStyle={{ top: 550 }}\n              align=\"center\"\n              height={100}\n              content={this.renderCustomizedLegend}\n              payload={this.state.chartLines}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  }\n}\n\nexport default CoronaChart\n","export const setDifference = (a, b) => new Set([...a].filter((x) => !b.has(x)))\n","export const formatStringToNumberOrNull = (strigWithNumber) => {\n  return Number(strigWithNumber) === 0 ? null : Number(strigWithNumber)\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport axios from 'axios'\nimport Select from 'react-select'\nimport CoronaChart from './components/line-chart'\nimport { formatStringToNumberOrNull } from './utils/data-format'\n\nconst WORLD_POP = 7794798729\nconst endpoint = 'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/ecdc/full_data.csv'\nconst locationsEndpoint = 'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/ecdc/locations.csv'\nconst initialCountries = [\n  { value: 'Italy', label: 'Italy' },\n  { value: 'Spain', label: 'Spain' },\n]\n\nconst parseData = (input, locations) => {\n  const newExtraction = {}\n  const countries = {}\n  const dataPerLine = String(input).split('\\n')\n  const locationLines = String(locations).split('\\n')\n  const popDict = {}\n  locationLines.splice(1, locationLines.length).map((row) => {\n    const [, location, , , population] = row.split(',')\n    popDict[location] = population\n  })\n  let header = true\n  const firstDataPointPerPlace = {}\n  for (const line of dataPerLine) {\n    if (header) {\n      header = false\n      continue\n    }\n    const [date, place, newCases, newDeaths, totalCases, totalDeaths] = line.split(',')\n    if (!place) {\n      continue\n    }\n    const popData = popDict[place]\n    countries[place] = true\n    if (!firstDataPointPerPlace[place]) {\n      if (Number(newCases) === 0 && Number(newDeaths) === 0 && Number(totalCases) === 0 && Number(totalDeaths) === 0) {\n        continue\n      } else {\n        firstDataPointPerPlace[place] = true\n      }\n    }\n    const dateFormatted = new Date(date).toISOString().substring(0, 10)\n    if (!newExtraction[dateFormatted]) {\n      newExtraction[dateFormatted] = {\n        date: dateFormatted,\n        [`newCases${place}`]: formatStringToNumberOrNull(newCases),\n        [`newDeaths${place}`]: formatStringToNumberOrNull(newDeaths),\n        [`totalCases${place}`]: formatStringToNumberOrNull(totalCases),\n        [`totalDeaths${place}`]: formatStringToNumberOrNull(totalDeaths),\n        [`popData${place}`]: formatStringToNumberOrNull(popData),\n      }\n    } else {\n      const currentData = newExtraction[dateFormatted]\n      newExtraction[dateFormatted] = {\n        [`newCases${place}`]: formatStringToNumberOrNull(newCases),\n        [`newDeaths${place}`]: formatStringToNumberOrNull(newDeaths),\n        [`totalCases${place}`]: formatStringToNumberOrNull(totalCases),\n        [`totalDeaths${place}`]: formatStringToNumberOrNull(totalDeaths),\n        [`popData${place}`]: formatStringToNumberOrNull(popData),\n        ...currentData,\n      }\n    }\n  }\n\n  // Resort the data on date\n  const dataPoints = Object.values(newExtraction).sort((a, b) => {\n    return a.date.localeCompare(b.date)\n  })\n\n  return [dataPoints, Object.keys(countries)]\n}\n\nconst customStyles = {\n  option: (provided, state) => ({\n    ...provided,\n    color: state.isSelected ? 'orange' : 'black',\n  }),\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      selectableCountries: initialCountries,\n      currentCountries: initialCountries,\n    }\n  }\n\n  async componentDidMount() {\n    const [res, locations] = await Promise.all([axios.get(`${endpoint}`), axios.get(`${locationsEndpoint}`)])\n    const [parsed, countries] = parseData(res.data, locations.data)\n    const labels = countries.map((key) => ({ value: key, label: key }))\n    this.setState({ selectableCountries: labels, newParsedData: parsed })\n    await this.getData(initialCountries)\n  }\n\n  async getData(countries) {\n    if (!countries) {\n      this.setState({ currentCountries: [], multiCountryData: null })\n      return\n    }\n    const newParsed = this.state.newParsedData\n    const multiData = []\n    if (countries) {\n      // Build data set with only the selected countries and only after they started getting data\n      let includeDataPointsGoingForward = false\n      for (const dataPoint of Object.values(newParsed)) {\n        for (const country of countries) {\n          if (dataPoint[`newCases${country.value}`]) {\n            includeDataPointsGoingForward = true\n            break\n          }\n        }\n        if (includeDataPointsGoingForward) {\n          const filteredDataPoint = {}\n          for (const country of countries) {\n            const newCases = dataPoint[`newCases${country.value}`] || null\n            const newDeaths = dataPoint[`newDeaths${country.value}`] || null\n            const totalCases = dataPoint[`totalCases${country.value}`] || null\n            const totalDeaths = dataPoint[`totalDeaths${country.value}`] || null\n            filteredDataPoint[`newCases${country.value}`] = newCases\n            filteredDataPoint[`newDeaths${country.value}`] = newDeaths\n            filteredDataPoint[`totalCases${country.value}`] = totalCases\n            filteredDataPoint[`totalDeaths${country.value}`] = totalDeaths\n\n            let popData = dataPoint[`popData${country.value}`] || null\n            // Hardcode world population since it's not in the source\n            if (!popData && country.value === 'World') {\n              popData = WORLD_POP\n            }\n\n            // Get data per million capita and use very hackish way to round floats\n            const [nc, nd, tc, td] = [newCases, newDeaths, totalCases, totalDeaths].map((value) =>\n              Number(Number((value / popData) * 1000000).toFixed(2))\n            )\n            filteredDataPoint[`newCases${country.value}PerCapita`] = nc\n            filteredDataPoint[`newDeaths${country.value}PerCapita`] = nd\n            filteredDataPoint[`totalCases${country.value}PerCapita`] = tc\n            filteredDataPoint[`totalDeaths${country.value}PerCapita`] = td\n          }\n          filteredDataPoint.date = dataPoint.date\n          multiData.push(filteredDataPoint)\n        }\n      }\n    }\n\n    this.setState({ currentCountries: countries, multiCountryData: multiData })\n  }\n\n  async _onChange(countries) {\n    await this.getData(countries)\n  }\n\n  render() {\n    const { selectableCountries, currentCountries, multiCountryData } = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"Top-left\">\n          Source code on: <a href=\"https://github.com/mathiastj/corona-graphs\">GitHub</a>\n        </div>\n        <div className=\"Top-right\">\n          Sources: ECDC via <a href=\"https://github.com/owid/covid-19-data\">OWID</a> under{' '}\n          <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0</a>\n        </div>\n        <header className=\"App-header\">\n          <div style={{ width: '80%' }}>\n            <Select\n              isMulti\n              options={selectableCountries}\n              onChange={(input) => this._onChange(input)}\n              defaultValue={initialCountries}\n              styles={customStyles}\n              value={currentCountries}\n            />\n          </div>\n          <div style={{ width: '95%', height: '90%' }}>\n            {!multiCountryData && \"Loading...\"}\n            <CoronaChart dataPoints={multiCountryData} countries={currentCountries.map((country) => country.value)} />\n          </div>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}